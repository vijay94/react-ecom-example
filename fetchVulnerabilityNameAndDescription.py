import json
import openai
import os
import base64

openai.api_key = os.environ["OPENAI_API_KEY"]

with open('./dependency-check-report.json') as f:
    data = json.load(f)

dependencies = data['dependencies']

vulnerability_list = []
count = 0
for dependency in dependencies:
    if count == 3:
        break
    if 'vulnerabilities' in dependency:
        vulnerabilities = dependency['vulnerabilities']
        for vulnerability in vulnerabilities:
            count = count + 1
            name = vulnerability['name']
            description = vulnerability['description']
            prompt = """
                You are the security expert in providing solutions for the security vulenerabilities, Following is the description of one of the Vulnerability. "{0}".
            """

            prompt = prompt.format(description) + """Can you provide a detailed explanation about the above vulnerability description? Make sure it is in the following json format: {"explanation": <Explanation of the vulnerability>,"HowToAvoid": <Explanation on how to avoid particular vulnerability>, "vulnerableCode": "<Sample code which can cause this vulnerability in base64 format>", "example": "<Sample code can fix this vulnerability in base64 format>"}"""

            response = openai.Completion.create(
              engine="text-davinci-003",
              prompt=prompt,
              max_tokens=800
            )
            print(response)
            answer = response.choices[0].text.strip().replace("Answer: ", "")
            print(answer)
            explanation = json.loads(answer)
            vulnerability_list.append({'name': name, 'description': description, 'result': explanation})
        data = vulnerability_list

# Generate HTML HEAD AND BODY

html = '<html>\n'
html += '<head>\n'
html += '<style>\n'
html += 'table {\n'
html += '  font-family: arial, sans-serif;\n'
html += '  border-collapse: collapse;\n'
html += '  width: 100%;\n'
html += '}\n'
html += '\n'
html += 'td, th {\n'
html += '  border: 1px solid #dddddd;\n'
html += '  text-align: left;\n'
html += '  padding: 8px;\n'
html += '}\n'
html += '\n'
html += 'tr:nth-child(even) {\n'
html += '  background-color: #dddddd;\n'
html += '}\n'
html += """
    pre {
  max-width: 200px;
  border-radius: 20px;
}
"""
html += '</style>\n'
html += '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism-tomorrow.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />'
html += '</head>\n'
html += '<body>\n'


# Generate HTML table
html += '<table>\n'
html += '<tr><th>Vulnerability</th><th>Description</th><th>Explanation</th><th>How To Avoid</th><th>Vulnerable Code</th><th>Possible fix</th></tr>\n'
for item in data:
    try:
        html += f'<tr><td>{item["name"]}</td><td>{item["description"]}</td><td>{item["result"]["explanation"]}</td><td>{item["result"]["HowToAvoid"]}</td><td><pre class="language-js"><code class="language-js">{str(base64.b64decode(item["result"]["vulnerableCode"]), "UTF-8")}</code></pre></td><td><pre class="language-js"><code class="language-js">{str(base64.b64decode(item["result"]["example"]), "UTF-8")}</code></pre></td></tr>\n'
    except:
        pass
html += '</table>'

html += '<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>'
# Close HTML BODY AND HTML
html += '</body>\n'
html += '</html>\n'

# Create the report directory if it doesn't exist already and index.html file within it
if not os.path.exists('./report'):
    os.makedirs('./report')

# Save the generated HTML to a file
with open('./report/index.html', 'w') as f:
    f.write(html)
